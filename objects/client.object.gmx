<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ip=get_string("Enter the IP of the server", "127.0.0.1") 

global.client_id = network_create_socket( network_socket_tcp );
network_connect(global.client_id,ip,7980);
gun_hold=0


//You can do this independently where you want to do it (server/client)
//Create Event
default_buffer = buffer_create(256, buffer_grow, 1); //We have a buffer
//Where i need to send data.
buffer_seek(default_buffer,buffer_seek_start, 0);//Take the buffer by the beginning
buffer_write(default_buffer, buffer_u16,CLIENT_JOIN);//The first data byte as ID. Use constants for this and you will save a lot of time!!!
//Note: You can use a “buffer_u8” if you send less that 255 different packets
network_send_packet(global.client_id, default_buffer, buffer_tell(default_buffer));
/*“Socket” is the “mailbox” variable in the client and on the server is the “socket” of the ds_map “async_load” if you see the YoYo´s example 
you will see a list with all the sockets that is filled when the server has a connection there is where all socketids are stored.*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player)
{
buffer_seek(default_buffer,buffer_seek_start, 0);//Take the buffer by the beginning
buffer_write(default_buffer, buffer_u16,DUMMY_STATS);
buffer_write(default_buffer, buffer_s16,player.x);
buffer_write(default_buffer, buffer_s16,player.y);
buffer_write(default_buffer, buffer_u16,player.spr);
buffer_write(default_buffer, buffer_u16,player.spr_gun);
buffer_write(default_buffer, buffer_s16,player.face);
buffer_write(default_buffer, buffer_u16,player.aim_dir);
buffer_write(default_buffer, buffer_s16,player.image_single);
buffer_write(default_buffer, buffer_s16,player.flip);
buffer_write(default_buffer, buffer_u16,player.gun);
buffer_write(default_buffer, buffer_s16,player.gun_x);
buffer_write(default_buffer, buffer_s16,player.gun_y);
network_send_packet(global.client_id, default_buffer, buffer_tell(default_buffer));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = ds_map_find_value(async_load, "id"); //We are searching what data has “id”
//The variable “server” is the return of “network_create_server”
if(global.client_id == eventid ) //If that data is our server
{
// We have a new packet
var buff = ds_map_find_value(async_load, "buffer"); //The content of the packet
var cmd = buffer_read(buff, buffer_u16 ); //The first data of each packet
var sock = ds_map_find_value(async_load, "id"); //The sender
//var sockid = ds_map_find_value(async_load, "id"); //The sender
switch (cmd) //The first data is telling what we are doing with the rest of the packet
{
case MAKE_DUMMY:
instance_create(buffer_read(buff, buffer_u16 ),buffer_read(buff, buffer_u16 ),dummy)
break;

case MAKE_PLAYER:
instance_create(buffer_read(buff, buffer_u16 ),buffer_read(buff, buffer_u16 ),player)
global.waiting=0
break;

case DUMMY_STATS:
dummy.x=buffer_read(buff, buffer_s16 )
dummy.y=buffer_read(buff, buffer_s16 )
dummy.spr=buffer_read(buff, buffer_u16 )
dummy.spr_gun=buffer_read(buff, buffer_u16 )
dummy.face=buffer_read(buff, buffer_s16 )
dummy.aim_dir=buffer_read(buff, buffer_u16 )
dummy.image_single=buffer_read(buff, buffer_s16 )
dummy.flip=buffer_read(buff, buffer_s16 )
dummy.gun=buffer_read(buff, buffer_u16 )
dummy.gun_x=buffer_read(buff, buffer_s16 )
dummy.gun_y=buffer_read(buff, buffer_s16 )
break;

case DUMMY_SHOOT:
gun_hold=global.gun
global.gun=dummy.gun
with(dummy){shoot_gun1()}
global.gun=gun_hold
break;

case DUMMY_DIED:
with(dummy){instance_destroy()}
multiplayer_controler.alarm[2]=90
break;
}
}


/*
buffer_write(default_buffer, buffer_u16,player.spr);
buffer_write(default_buffer, buffer_u16,player.spr_gun);
buffer_write(default_buffer, buffer_u16,player.face);
buffer_write(default_buffer, buffer_u16,player.aim_dir);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(default_buffer,buffer_seek_start, 0);//Take the buffer by the beginning
buffer_write(default_buffer, buffer_u16,DUMMY_DIED);
network_send_packet(global.client_id, default_buffer, buffer_tell(default_buffer));

multiplayer_controler.alarm[2]=90
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(default_buffer,buffer_seek_start, 0);//Take the buffer by the beginning
buffer_write(default_buffer, buffer_u16,DUMMY_SHOOT);
network_send_packet(global.client_id, default_buffer, buffer_tell(default_buffer));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
