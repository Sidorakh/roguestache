<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_single=0
//global.quality=4
light_create(320,7,c_white)//lower quality number is better looking but slower
update=0
angle=70
//Sets the points and values to later draw a primative. 
dir=player.aim_dir-30
ray=0
rays=0
draw_set_color(c_lime)


repeat(angle/quality)
{


x2=x
y2=y
i=0

//l=trace_get_length (x, y, size, dir, 5) //10*global.quality)
l=trace_get_length (x, y, dir, size,light_wall_parent,1,1)
if l=0 {l=size}
i=l
point_x[ray]=x+lengthdir_x(l+4,dir)//l+16
point_y[ray]=y+lengthdir_y(l+4,dir)
point_h[ray]=(i/size)/2
if i&gt;size {point_h[ray]=0.5}

ray+=1
dir+=quality
}

rays=ray
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player)=false{exit}
update+=1

if update&gt;1
{
update=0
dir=player.aim_dir-(angle/2)
ray=0



repeat(angle/quality)
{


x2=x
y2=y
i=0

//l=trace_get_length (x, y, size, dir, 32) //10*global.quality)
l=trace_get_length (x, y, dir, size,light_wall_parent,1,1)

if l=0 {l=size}
i=l
point_x[ray]=x+lengthdir_x(l+4,dir)//l+16
point_y[ray]=y+lengthdir_y(l+4,dir)
point_h[ray]=(i/size)/2
if i&gt;size {point_h[ray]=0.5}

ray+=1
dir+=quality
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if instance_exists(player)
{
x=player.x+lengthdir_x(16,player.aim_dir)
y=player.y+lengthdir_y(16,player.aim_dir)
if global.gun=0 {image_single=0}
if global.gun=1 {image_single=1}
if global.gun=2 {image_single=0}
if global.gun=3 {image_single=0}
if global.gun=4 {image_single=1}
if global.gun=5 {image_single=1}
if global.gun=6 {image_single=0}
if global.gun=7 {image_single=0}
if global.gun=8 {image_single=0}
if global.gun=9 {image_single=0}
if global.gun=10 {image_single=0}
if global.gun=11 {image_single=1}
if global.gun=12 {image_single=0}
if global.gun=13 {image_single=0}
if global.gun=14 {image_single=0}
if global.gun=15 {image_single=0}
if global.gun=16 {image_single=0}
if global.gun=17 {image_single=0}
if global.gun=18 {image_single=1}
if global.gun=19 {image_single=0}
if global.gun=20 {image_single=0}
}
else
{
instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(player)=false{exit}

/*

if ((global.gun=10) or (global.gun=13))

{
draw_sprite_ext(spr_light,image_single,player.x-view_xview[0],player.y-view_yview[0],1,1,0,c_white,1)
}
else
{
draw_sprite_ext(spr_flashlight,image_single,x-view_xview[0],y-view_yview[0],1,1,player.aim_dir,c_white,1)
}
}
*/
i=0
ii=1

xx=0
yy=0
draw_primitive_begin_texture(pr_trianglelist,sprite_get_texture(spr_light,0))
repeat((angle-1)/quality)
    {
    
    if ii&lt;rays
        {
        //-(ii/rays)
        draw_vertex_texture_color(x-view_xview[0],y-view_yview[0],0.5,0.5,image_blend,1)
        draw_vertex_texture_color(point_x[i]-view_xview[0],point_y[i]-view_yview[0],0.5+(point_h[i]),0.5+(point_h[i]),image_blend,0.5)
        draw_vertex_texture_color(point_x[ii]-view_xview[0],point_y[ii]-view_yview[0],0.5+(point_h[ii]),0.5+(point_h[ii]),image_blend,0.5)
        }
    
    i+=1
    ii+=1
    if ii=angle/quality{ii=0}
    }
draw_primitive_end()

//draw_sprite_ext(spr_light,0,x-view_xview[0],y-view_yview[0],1,1,0,image_blend,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//



/*
//DEBUG ONLY
if global.debug=true
{
ray=0
repeat(angle/quality)
{
draw_line(x,y,point_x[ray],point_y[ray])
ray+=1
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
