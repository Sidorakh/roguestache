<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spawner</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>count=0
done=0
type="nothing"

multiply=global.loops+1
if multiply&gt;2{multiply=2}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if done=0
{

if type="metroid"{done=1 count=choose(1,2,3)repeat(count){instance_create(x+16,y+16,enemy)}}
if type="crawler"{done=1 count=1 repeat(count){instance_create(x+16,y+16,crawler)}}
if type="spider"{done=1 count=choose(1,2) repeat(count){instance_create(x+16,y+16,spider)}}
if type="swarm"{done=1 count=1 repeat(count){instance_create(x+16,y+16,swarm_master)}}
if type="gianteye"{done=1 count=1 repeat(count){instance_create(x+16,y+16,giant_eye)}}
if type="copter eye"{done=1 count=choose(1,2) repeat(count){instance_create(x+16,y+16,enemy2)}}
if type="eyeslime"{done=1 count=choose(1,2) repeat(count){instance_create(x+16,y+16,eye_slime)}}

if type="mother"{done=1 instance_create(x+16,y+16,enemy_mother)}

if type="green metroid"
    {
    done=1
    if global.loops=0{done=0 type="metroid" exit}
    count=choose(1)*(multiply) 
    repeat(count)
        {
        t=instance_create(x+16,y+16,enemy)
        with(t)
            {
            level=2
            sprite_index=spr_enemy1_2
            }
        }
    }
    

if type="purple metroid"
    {
    done=1
    if global.loops&lt;2{done=0 type="metroid" exit}
    count=choose(1)*(multiply) 
    repeat(count)
        {
        t=instance_create(x+16,y+16,enemy)
        with(t)
            {
            level=3
            sprite_index=spr_enemy1_3
            }
        }
    }
    


if type="green spider"
    {
    done=1
    if global.loops=0{done=0 type="spider" exit}
    count=choose(1,2)
    repeat(count)
        {
        t=instance_create(x+16,y+16,spider)
        with(t)
            {
            level=2
            sprite_index=spr_spider_stand_level2
            s_stand=spr_spider_stand_level2
            s_walk=spr_spider_walk_level2
            s_eye_lower=spr_spider_eye_lower_level2
            s_eye=spr_spider_eye_level2
            life=21
            }
        }
    }
    
    
if type="purple spider"
    {
    done=1
    if global.loops&lt;2{done=0 type="spider" exit}
    count=choose(1,2)
    repeat(count)
        {
        t=instance_create(x+16,y+16,spider)
        with(t)
            {
            level=3
            sprite_index=spr_spider_stand_level3
            s_stand=spr_spider_stand_level3
            s_walk=spr_spider_walk_level3
            s_eye_lower=spr_spider_eye_lower_level3
            s_eye=spr_spider_eye_level3
            life=30
            }
        }
    }

if type="shotgun science"
    {
    done=1
    if global.loops&lt;2{done=0 type="science" exit}
    count=choose(1,2)
    repeat(count)
        {
        t=instance_create(x+16,y+16,science)
        with(t)
            {
            level=3
            life=4
            alarm[1]=60
            sprite_index=spr_science_stand_level3
            s_stand=spr_science_stand_level3
            s_walk=spr_science_run_level3
            }
        }
    }


if type="toxic science"
    {
    done=1
    if global.loops=0{done=0 type="science" exit}
    count=choose(2,3)
    repeat(count)
        {
        t=instance_create(x+16,y+16,science)
        with(t)
            {
            level=2
            life=4
            sprite_index=spr_science_stand_level2
            s_stand=spr_science_stand_level2
            s_walk=spr_science_run_level2
            }
        }
    }
    
if type="science"
    {
    done=1
    count=1*(multiply) 
    repeat(count)
        {
        t=instance_create(x+16,y+16,science)
        }
    }



}

/*
"metroid"
"crawler"
"spider"
"swarm"
"gianteye"
"copter eye"
"green metroid"
"eyeslime"
"green spider"
"shotgun science"
"toxic science"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self()
draw_sprite_text(x+16,y-16,string(count)+"x "+type,1,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
